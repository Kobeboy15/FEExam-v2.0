{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kobeboy\\\\Desktop\\\\frontend-exam\\\\frontend\\\\pages\\\\_app.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { useState } from 'react';\nimport UserContext from '../components/UserContext';\nimport '../styles/global.css';\nimport ApolloClient from \"apollo-client\";\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { createHttpLink } from 'apollo-link-http';\nexport default function App({\n  Component,\n  pageProps\n}) {\n  const {\n    0: loginStatus,\n    1: setLoginStatus\n  } = useState(false);\n  const httpLink = createHttpLink({\n    uri: \"http://localhost:4000\"\n  });\n  const client = new ApolloClient({\n    cache: new InMemoryCache(),\n    link: httpLink\n  });\n  return __jsx(ApolloProvider, {\n    client: client,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }\n  }, __jsx(UserContext.Provider, {\n    value: {\n      loginStatus: loginStatus,\n      toggleLogin: setLoginStatus\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }, __jsx(Component, _extends({}, pageProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }))));\n}","map":{"version":3,"sources":["C:/Users/Kobeboy/Desktop/frontend-exam/frontend/pages/_app.js"],"names":["useState","UserContext","ApolloClient","ApolloProvider","InMemoryCache","createHttpLink","App","Component","pageProps","loginStatus","setLoginStatus","httpLink","uri","client","cache","link","toggleLogin"],"mappings":";;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAO,sBAAP;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,SAASC,cAAT,QAA+B,qBAA/B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AAEA,eAAe,SAASC,GAAT,CAAa;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAb,EAAuC;AACpD,QAAM;AAAA,OAACC,WAAD;AAAA,OAAcC;AAAd,MAAgCV,QAAQ,CAAC,KAAD,CAA9C;AAEA,QAAMW,QAAQ,GAAGN,cAAc,CAAC;AAC9BO,IAAAA,GAAG,EAAE;AADyB,GAAD,CAA/B;AAIA,QAAMC,MAAM,GAAG,IAAIX,YAAJ,CAAiB;AAC9BY,IAAAA,KAAK,EAAE,IAAIV,aAAJ,EADuB;AAE9BW,IAAAA,IAAI,EAAEJ;AAFwB,GAAjB,CAAf;AAKA,SACE,MAAC,cAAD;AAAgB,IAAA,MAAM,EAAEE,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEJ,MAAAA,WAAW,EAAEA,WAAf;AAA4BO,MAAAA,WAAW,EAAEN;AAAzC,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD,eAAeF,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,CADF,CADF;AAOD","sourcesContent":["import { useState } from 'react'\r\nimport UserContext from '../components/UserContext'\r\nimport '../styles/global.css'\r\nimport ApolloClient from \"apollo-client\";\r\nimport { ApolloProvider } from '@apollo/react-hooks'\r\nimport { InMemoryCache } from 'apollo-cache-inmemory';\r\nimport { createHttpLink } from 'apollo-link-http';\r\n\r\nexport default function App({ Component, pageProps }) {\r\n  const [loginStatus, setLoginStatus] = useState(false);\r\n\r\n  const httpLink = createHttpLink({\r\n    uri: \"http://localhost:4000\"\r\n  })\r\n  \r\n  const client = new ApolloClient({\r\n    cache: new InMemoryCache(),\r\n    link: httpLink\r\n  })\r\n\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <UserContext.Provider value={{ loginStatus: loginStatus, toggleLogin: setLoginStatus }}>\r\n        <Component {...pageProps} />\r\n      </UserContext.Provider>\r\n    </ApolloProvider>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}